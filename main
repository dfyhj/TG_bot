import asyncio
import logging
from keep_alive import keep_alive
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.types import Message
from strategies import analyze_all_strategies
from utils import is_volatile, calculate_volatility, get_signal_history_text, get_education_text, get_bot_info_text
from tradingview_ta import TA_Handler, Interval
from datetime import datetime

API_TOKEN = "8162392833:AAHFd_ywFuZ-3RD-JppxId64oJgFMticBE0"

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

user_pair = {}
user_timeframe = {}
signal_history = []
min_reliability_threshold = 50
volatility_filter = set()

main_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="üöÄ–°–∏–≥–Ω–∞–ªüöÄ")],
        [types.KeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É"), types.KeyboardButton(text="–¢–∞–π–º—Ñ—Ä–µ–π–º")],
        [types.KeyboardButton(text="–ò—Å—Ç–æ—Ä–∏—è"), types.KeyboardButton(text="–û–±—É—á–µ–Ω–∏–µ")],
        [types.KeyboardButton(text="–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"), types.KeyboardButton(text="–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å")],
        [types.KeyboardButton(text="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –í/–ü"), types.KeyboardButton(text="–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞")],
        [types.KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"), types.KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ],
    resize_keyboard=True
)

pair_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="EURUSD"), types.KeyboardButton(text="GBPUSD")],
        [types.KeyboardButton(text="USDJPY"), types.KeyboardButton(text="AUDUSD")],
        [types.KeyboardButton(text="EURJPY"), types.KeyboardButton(text="OTC:EURUSD")],
        [types.KeyboardButton(text="OTC:GBPUSD")]
    ],
    resize_keyboard=True
)

timeframe_keyboard = types.ReplyKeyboardMarkup(
    keyboard=[
        [types.KeyboardButton(text="1m"), types.KeyboardButton(text="5m"), types.KeyboardButton(text="15m")]
    ],
    resize_keyboard=True
)

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)

@router.message(lambda m: m.text == "–í—ã–±—Ä–∞—Ç—å –≤–∞–ª—é—Ç—É")
async def select_currency_button(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É:", reply_markup=pair_keyboard)

@router.message(lambda m: m.text in ["EURUSD", "GBPUSD", "USDJPY", "AUDUSD", "EURJPY", "OTC:EURUSD", "OTC:GBPUSD"])
async def select_pair(message: Message):
    user_pair[message.chat.id] = message.text
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞–ª—é—Ç–Ω—É—é –ø–∞—Ä—É: {message.text}", reply_markup=main_keyboard)

@router.message(lambda m: m.text == "–¢–∞–π–º—Ñ—Ä–µ–π–º")
async def select_timeframe_button(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π–º—Ñ—Ä–µ–π–º:", reply_markup=timeframe_keyboard)

@router.message(lambda m: m.text in ["1m", "5m", "15m"])
async def select_tf(message: Message):
    user_timeframe[message.chat.id] = message.text
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞–π–º—Ñ—Ä–µ–π–º: {message.text}", reply_markup=main_keyboard)

@router.message(lambda m: m.text == "üöÄ–°–∏–≥–Ω–∞–ªüöÄ")
async def cmd_signal(message: Message):
    pair = user_pair.get(message.chat.id, "EURUSD")
    tf = user_timeframe.get(message.chat.id, "1m")

    await message.answer("–ò—â—É –ª—É—á—à–∏–π –º–æ–º–µ–Ω—Ç –¥–ª—è –≤—Ö–æ–¥–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    try:
        interval_map = {
            "1m": Interval.INTERVAL_1_MINUTE,
            "5m": Interval.INTERVAL_5_MINUTES,
            "15m": Interval.INTERVAL_15_MINUTES
        }

        handler = TA_Handler(
            symbol=pair.replace("OTC:", ""),
            screener="forex",
            exchange="FX_IDC",
            interval=interval_map.get(tf, Interval.INTERVAL_1_MINUTE)
        )

        analysis = handler.get_analysis()

        if message.chat.id in volatility_filter and not is_volatile(analysis):
            await message.answer("–†—ã–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ª–∞—Ç–∏–ª–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        decision, match_count, details = analyze_all_strategies(analysis)

        if decision != "none" and (match_count * 10) >= min_reliability_threshold:
            now = datetime.now().strftime("%d.%m.%Y %H:%M")
            signal_text = (
                f"<b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {'–ü–æ–∫—É–ø–∫–∞ (–≤–≤–µ—Ä—Ö)' if decision == 'buy' else '–ü—Ä–æ–¥–∞–∂–∞ (–≤–Ω–∏–∑)'}\n"
                f"<b>–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞:</b> {match_count * 10}%\n"
                f"<b>–í–∞–ª—é—Ç–Ω–∞—è –ø–∞—Ä–∞:</b> {pair}\n"
                f"<b>–¢–∞–π–º—Ñ—Ä–µ–π–º:</b> {tf}\n"
                f"<b>–°–æ–≤–ø–∞–≤—à–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:</b> {details}\n"
                f"<b>–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞:</b> {now}"
            )
            await message.answer(signal_text)
            signal_history.append((pair, tf, decision, "–æ–∂–∏–¥–∞–µ—Ç—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç"))
        else:
            await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Å–∏–≥–Ω–∞–ª–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–∏–≥–Ω–∞–ª–∞.")

@router.message(lambda m: m.text == "–ò—Å—Ç–æ—Ä–∏—è")
async def cmd_history(message: Message):
    text = get_signal_history_text(signal_history)
    await message.answer(text)

@router.message(lambda m: m.text == "–û–±—É—á–µ–Ω–∏–µ")
async def cmd_education(message: Message):
    await message.answer(get_education_text())

@router.message(lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def cmd_info(message: Message):
    await message.answer(get_bot_info_text())

@router.message(lambda m: m.text == "–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å")
async def toggle_volatility_filter(message: Message):
    if message.chat.id in volatility_filter:
        volatility_filter.remove(message.chat.id)
        await message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        volatility_filter.add(message.chat.id)
        await message.answer("–§–∏–ª—å—Ç—Ä –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á—ë–Ω.")

@router.message(lambda m: m.text == "–ù–∞–¥—ë–∂–Ω–æ—Å—Ç—å")
async def adjust_reliability(message: Message):
    global min_reliability_threshold
    min_reliability_threshold = (min_reliability_threshold + 10) % 110
    await message.answer(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ —Ç–µ–ø–µ—Ä—å: {min_reliability_threshold}%")

@router.message(lambda m: m.text == "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –í/–ü")
async def vp_analyzer(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@router.message(lambda m: m.text == "–ê–≤—Ç–æ–ø–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞")
async def auto_entry(message: Message):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–ø–æ–∏—Å–∫–∞ –ª—É—á—à–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

@router.message(lambda m: m.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings(message: Message):
    await message.answer("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")

async def main():
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    keep_alive()
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
